3) Databinding?, String interpolation, Property binding, Event binding and ngModel for
two way-binding
6) Directives - *ngIf, *ngFor, [ngStyle], [ngClass], *ngIf-else, [ngSwitch] - *ngSwitchCase - *ngSwitchDefault
1) Component communication:
    -> Child to parent communication (Custom event) using @Output('alias') Decorator with alias.
    -> Parent to child communication (Custom property) using @Input('alias') Decorator with alias.
2) Local reference - #nameOfLocalReference
3) @ViewChild() - Provide the more accessibility on Local Reference
4) ng-content
5) ng-content with @ContentChild()
1) Custom attribute directive - renderer2.
2) @HostListener() - To listen the event of hosted element.
3) @HostBinding() - Used to bind the property of hosted element.
4) Custom structure directive
5) Services - Sharing data between multiple components.
6) Routing - Parameter, Query parameter and fragment, redirecting and wildcard route.
1) Observable - Custom observable, operator(like map(), filter()), Subscribe(), Unsubscribe(),
Subject.
2) Pipe - Custom pipe, Built-in pipe : async pipe, json pipe, Number pipe, Currency pipe, Date pipe, slice pipe.
3) Http request - setHeaders, QueryParams
4) Lazy loading of Module and component
Custom Pipes
Custom module
1) Dynamic component - Populate component using Typescript code, anywhere in the application (like alertBox, showError)
2) Basic of standalone component
3) Basic of NgRx (Redux)
4) Service worker
1) Class binding & Style Binding Recap
3) Component Life Cycle Hook
-> HTTP method: POST, GET, PUT, DELETE
-> .pipe and map operator of 'rxjs'
-> http Observable
-> reactiveForm && formModule and form validation....
Encapsulations,
changeDetection technique


Useful commands:
ng generate component component_name or ng g c component_name
ng g s service_name
ng g p pipe_name
ng g d directive_name
ng g m module_name or ng g m module_name --routing with routing